;;;
;;; Universal Monitor 8051/8751/8031
;;;   Copyright (C) 2020 Haruo Asano
;;;

	CPU	8051

TARGET:	EQU	"8051"

	INCLUDE	"stddef51.inc"

	INCLUDE	"config.inc"

	INCLUDE	"../common.inc"

;;;
;;; ROM area
;;;

	SEGMENT	CODE

	ORG	0000H
	JMP	CSTART

	ORG	0003H
	JMP	INTDMY

CSTART:
	MOV	R0,#STACK
	MOV	SP,R0
	
	CALL	INIT

	MOV	A,#high(USER_B)
	MOV	DSADDR,A
	MOV	SADDR,A
	MOV	GADDR,A
	MOV	A,#low(USER_B)
	MOV	DSADDR+1,A
	MOV	SADDR+1,A
	MOV	GADDR+1,A
	MOV	BANK,#'D'
	MOV	HEXMOD,#'I'
	MOV	PSPEC,#0

	;; Opening message
	MOV	DPTR,#OPNMSG
	CALL	MSGOUT

WSTART:
	MOV	DPTR,#PROMPT
	CALL	MSGOUT
	CALL	GETLIN
	MOV	R1,#INBUF
	CALL	SKIPSP
	CALL	UPPER
	JZ	WSTART

	CJNE	A,#'D',M00
	JMP	DUMP
M00:
	CJNE	A,#'G',M01
	JMP	GO
M01:
	CJNE	A,#'S',M02
	JMP	SETM
M02:
	CJNE	A,#'H',M03
	JMP	HBANK
M03:

	CJNE	A,#'L',M04
	JMP	LOADH
M04:
	
ERR:
	MOV	DPTR,#ERRMSG
	CALL	MSGOUT
	JMP	WSTART

;;;
;;; Dump memory
;;;

DUMP:
	INC	R1
	CALL	SKIPSP
	CALL	RDHEX
	MOV	A,R2
	JNZ	DP0
	;; No arg.
	CALL	SKIPSP
	MOV	A,@R1
	JNZ	ERR
	MOV	A,DSADDR+1
	ADD	A,#128
	MOV	DEADDR+1,A
	MOV	A,DSADDR
	ADDC	A,#0
	MOV	DEADDR,A
	JMP	DPM
DP0:
	;; 1st arg. found
	MOV	DSADDR,R4
	MOV	DSADDR+1,R5
	CALL	SKIPSP
	CJNE	A,#',',DP00
	JMP	DP1
DP00:
	JNZ	ERR
	;; No 2nd arg.
	MOV	A,#128
	ADD	A,R5
	MOV	DEADDR+1,A
	CLR	A
	ADDC	A,R4
	MOV	DEADDR,A
	JMP	DPM
DP1:
	INC	R1
	CALL	SKIPSP
	CALL	RDHEX
	CALL	SKIPSP
	MOV	A,R2
	JZ	ERR
	MOV	A,@R1
	JNZ	ERR
	MOV	A,R5
	ADD	A,#1
	MOV	DEADDR+1,A
	CLR	A
	ADDC	A,R4
	MOV	DEADDR,A
DPM:
	;; DUMP main
	MOV	R4,DSADDR
	MOV	A,DSADDR+1
	ANL	A,#0F0H
	MOV	R5,A
	CLR	A
	MOV	DSTATE,A
	;; for DEBUG
	IF DEBUG
	MOV	A,R4
	CALL	HEXOUT2
	MOV	A,R5
	CALL	HEXOUT2
	MOV	A,#'('
	CALL	CONOUT
	MOV	A,DSADDR
	CALL	HEXOUT2
	MOV	A,DSADDR+1
	CALL	HEXOUT2
	MOV	A,#'-'
	CALL	CONOUT
	MOV	A,DEADDR
	CALL	HEXOUT2
	MOV	A,DEADDR+1
	CALL	HEXOUT2
	MOV	A,#')'
	CALL	CONOUT
	CALL	CRLF
	ENDIF
DPM0:
	CALL	DPLN
	CALL	CONST
	JNZ	DPM1		; Break
	MOV	A,DSTATE
	CJNE	A,#2,DPM0
	MOV	DSADDR,DEADDR
	MOV	DSADDR+1,DEADDR+1
	JMP	WSTART
DPM1:
	CALL	CONIN
	MOV	DSADDR,R4
	MOV	DSADDR+1,R5
	JMP	WSTART

DPLN:
	;; Dump line
	CALL	BNKOUT
	MOV	A,#':'
	CALL	CONOUT

	MOV	A,R4
	CALL	HEXOUT2
	MOV	A,R5
	CALL	HEXOUT2
	MOV	DPTR,#DSEP0
	CALL	MSGOUT
	MOV	R1,#INBUF
	MOV	R2,#16
DPL0:
	CALL	DPB
	DJNZ	R2,DPL0

	MOV	DPTR,#DSEP1
	CALL	MSGOUT

	;; Print ASCII area
	MOV	R1,#INBUF
	MOV	R2,#16
DPL1:
	MOV	A,@R1
	INC	R1
	CJNE	A,#' ',$+3
	JC	DPL2
	CJNE	A,#7FH,$+3
	JNC	DPL2
	JMP	DPL3
DPL2:
	MOV	A,#'.'
DPL3:	
	CALL	CONOUT
	DJNZ	R2,DPL1
	JMP	CRLF

DPB:
	;; Dump byte
	MOV	A,#' '
	CALL	CONOUT
	MOV	A,DSTATE
	JNZ	DPB2
	;; Dump state 0
	MOV	A,R4
	CJNE	A,DSADDR,DPB0
	MOV	A,R5
	CJNE	A,DSADDR+1,DPB0
	JMP	DPB1
DPB0:
	;; Still 0 or 2
	MOV	A,#' '
	CALL	CONOUT
	MOV	A,#' '
	CALL	CONOUT
	MOV	@R1,#' '
	INC	R1
	MOV	A,#1
	ADD	A,R5
	MOV	R5,A
	CLR	A
	ADDC	A,R4
	MOV	R4,A
	RET
DPB1:
	;; Found start address
	MOV	DSTATE,#1
DPB2:
	MOV	A,DSTATE
	CJNE	A,#1,DPB0
	;; Dump state 1
	CALL	READ
	MOV	@R1,A
	INC	R1
	CALL	HEXOUT2
	MOV	A,#1
	ADD	A,R5
	MOV	R5,A
	CLR	A
	ADDC	A,R4
	MOV	R4,A
	MOV	A,R4
	CJNE	A,DEADDR,DPBR
	MOV	A,R5
	CJNE	A,DEADDR+1,DPBR
	;; Found end address
	MOV	DSTATE,#2
DPBR:
	RET

;;;
;;; GO address
;;;

GO:
	INC	R1
	CALL	SKIPSP
	CALL	RDHEX
	MOV	A,@R1
	JNZ	GERR
	MOV	A,R2
	JZ	G0
	MOV	GADDR,R4
	MOV	GADDR+1,R5
G0:
	CLR	A
	MOV	DPH,GADDR
	MOV	DPL,GADDR+1
	JMP	@A+DPTR
GERR:
	JMP	ERR

;;;
;;; SET memory
;;;

SETM:
	INC	R1
	CALL	SKIPSP
	CALL	RDHEX
	CALL	SKIPSP
	JNZ	GERR
	MOV	A,R2
	JNZ	SMEM0
	MOV	R4,SADDR
	MOV	R5,SADDR+1
SMEM0:

SMEM1:
	CALL	BNKOUT
	MOV	A,#':'
	CALL	CONOUT

	MOV	A,R4
	CALL	HEXOUT2
	MOV	A,R5
	CALL	HEXOUT2
	MOV	DPTR,#DSEP1
	CALL	MSGOUT
	CALL	READ
	CALL	HEXOUT2
	MOV	A,#' '
	CALL	CONOUT
	CALL	GETLIN
	MOV	R1,#INBUF
	CALL	SKIPSP
	JNZ	SMEM2
	;; Empty  (Increment address)
SMEM15:	
	MOV	A,#1
	ADD	A,R5
	MOV	R5,A
	CLR	A
	ADDC	A,R4
	MOV	R4,A
	MOV	SADDR,R4
	MOV	SADDR+1,R5
	JMP	SMEM1
SMEM2:
	CJNE	A,#'-',SMEM3
	;; '-'  (Decrement address)
	MOV	A,R5
	CLR	C
	SUBB	A,#1
	MOV	R5,A
	MOV	A,R4
	SUBB	A,#0
	MOV	R4,A
	MOV	SADDR,R4
	MOV	SADDR+1,R5
	JMP	SMEM1
SMEM3:
	CJNE	A,#'.',SMEM4
	;; '.'  (Quit)
	MOV	SADDR,R4
	MOV	SADDR+1,R5
	JMP	WSTART
SMEM4:
	MOV	DPH,R4
	MOV	DPL,R5
	CALL	RDHEX
	MOV	A,R2
	JZ	GERR
	MOV	A,R5
	MOV	R5,DPL
	MOV	R4,DPH
	CALL	WRITE
	JMP	SMEM15

;;;
;;; H (bank)
;;;

HBANK:
	INC	R1
	CALL	SKIPSP
	CALL	UPPER
	JZ	HBV

	CJNE	A,#'C',HB0
	JMP	HB2
HB0:	
	CJNE	A,#'D',HB1
	JMP	HB2
HB1:	
	CJNE	A,#'X',HBE
HB2:
	MOV	R0,A
	INC	R1
	CALL	SKIPSP
	JNZ	HBE
	MOV	BANK,R0
	JMP	WSTART
HBE:
	JMP	ERR
HBV:
	CALL	BNKOUT
	CALL	CRLF
	JMP	WSTART

BNKOUT:
	MOV	A,BANK
	CJNE	A,#'C',BO0
	JMP	BO3
BO0:	
	CJNE	A,#'D',BO1
	JMP	BO3
BO1:	
	CJNE	A,#'X',BO2
	JMP	BO3
BO2:
	MOV	A,#'D'
	MOV	BANK,A
BO3:	
	JMP	CONOUT

;;;
;;; LOAD HEX file
;;;

LOADH:
	INC	R1
	CALL	SKIPSP
	CALL	RDHEX
	CALL	SKIPSP
	JNZ	LHE

	MOV	A,R2
	JNZ	LH0
	CLR	A
	MOV	R4,A		; Offset
	MOV	R5,A
LH0:
	MOV	TP0,R4
	MOV	TP0+1,R5
LH00:
	CALL	CONIN
	CJNE	A,#'S',LH1
	JMP	LHS0
LH1:
	CJNE	A,#':',LH2
	JMP	LHI0
LH2:
	;; Skip to EOL
	CJNE	A,#CR,LH20
	JMP	LH00
LH20:
	CJNE	A,#LF,LH3
	JMP	LH00
LH3:
	CALL	CONIN
	JMP	LH2
LHE:
	JMP	ERR

LHI0:
	CALL	HEXIN
	MOV	R3,A		; Checksum
	MOV	R2,A		; Length

	CALL	HEXIN
	MOV	R4,A		; Address H
	ADD	A,R3
	MOV	R3,A		; Checksum

	CALL	HEXIN
	MOV	R5,A		; Address L
	ADD	A,R3
	MOV	R3,A		; Checksum

	;; Add offset
	MOV	A,R5
	ADD	A,TP0+1
	MOV	R5,A
	MOV	A,R4
	ADDC	A,TP0
	MOV	R4,A

	CALL	HEXIN
	MOV	RECTYP,A	; Record type
	ADD	A,R3
	MOV	R3,A		; Checksum

	MOV	A,R2
	JZ	LHI3
LHI1:
	CALL	HEXIN
	PUSH	ACC
	ADD	A,R3
	MOV	R3,A		; Checksum

	MOV	A,RECTYP
	JNZ	LHI20

	POP	ACC
	CALL	WRITE
	MOV	A,#1		; INC R4:R5
	ADD	A,R5
	MOV	R5,A
	CLR	A
	ADDC	A,R4
	MOV	R4,A
	JMP	LHI2
LHI20:
	POP	ACC
LHI2:
	DJNZ	R2,LHI1
LHI3:
	CALL	HEXIN
	ADD	A,R3
	JNZ	LHIE
	MOV	A,RECTYP
	JZ	LH3
	JMP	WSTART
LHIE:
	MOV	DPTR,#IHEMSG
	CALL	MSGOUT
	JMP	WSTART
	
LHS0:
	CALL	CONIN
	MOV	RECTYP,A	; Record type

	CALL	HEXIN
	MOV	R2,A		; Length+3
	MOV	R3,A		; Checksum

	CALL	HEXIN
	MOV	R4,A		; Address H
	ADD	A,R3
	MOV	R3,A		; Checksum

	CALL	HEXIN
	MOV	R5,A		; Address L
	ADD	A,R3
	MOV	R3,A		; Checksum

	;; Add offset
	MOV	A,R5
	ADD	A,TP0+1
	MOV	R5,A
	MOV	A,R4
	ADDC	A,TP0
	MOV	R4,A

	DEC	R2
	DEC	R2
	DEC	R2
	MOV	A,R2
	JZ	LHS3
LHS1:
	CALL	HEXIN
	PUSH	ACC
	ADD	A,R3
	MOV	R3,A		; Checksum

	MOV	A,RECTYP
	CJNE	A,#'1',LHS2

	POP	ACC
	CALL	WRITE
	MOV	A,#1
	ADD	A,R5
	MOV	R5,A
	CLR	A
	ADDC	A,R4
	MOV	R4,A
	JMP	LHS20
LHS2:
	POP	ACC		; Drop
LHS20:
	DJNZ	R2,LHS1
LHS3:
	CALL	HEXIN
	ADD	A,R3
	CJNE	A,#0FFH,LHSE	; Checksum error

	MOV	A,RECTYP
	CJNE	A,#'9',LHS4
	JMP	WSTART
LHS4:
	JMP	LH3
LHSE:
	MOV	DPTR,#SHEMSG
	CALL	MSGOUT
	JMP	WSTART
	
;;;
;;; Other support routines
;;; 
	
MSGOUT:
	CLR	A
	MOVC	A,@A+DPTR
	INC	DPTR
	JZ	MOR
	CALL	CONOUT
	JMP	MSGOUT
MOR:
	RET

STROUT:
	CLR	A
	MOVX	A,@DPTR
	INC	DPTR
	JZ	MOR
	CALL	CONOUT
	JMP	STROUT
SOR:
	RET

HEXOUT2:
	PUSH	ACC
	SWAP	A
	CALL	HEXOUT1
	POP	ACC
HEXOUT1:
	ANL	A,#0FH
	ADD	A,#'0'
	CJNE	A,#'9'+1,$+3	; CMP A,#'9'+1
	JC	HO0
	ADD	A,#'A'-'9'-1
HO0:	
	JMP	CONOUT

HEXIN:
	CLR	A
	CALL	HI0
	SWAP	A
HI0:
	MOV	R0,A
	CALL	CONIN
	CALL	UPPER
	CJNE	A,#'0',$+3
	JC	HIR
	CJNE	A,#'9'+1,$+3
	JC	HI1
	CJNE	A,#'A',$+3
	JC	HIR
	CJNE	A,#'F'+1,$+3
	JNC	HIR
	CLR	C
	SUBB	A,#'A'-'9'-1
HI1:
	CLR	C
	SUBB	A,#'0'
	ORL	A,R0
HIR:
	RET

CRLF:
	MOV	A,#CR
	CALL	CONOUT
	MOV	A,#LF
	JMP	CONOUT

GETLIN:
	MOV	R1,#INBUF
	MOV	R2,#0
GL0:
	CALL	CONIN
	CJNE	A,#CR,GL1
	JMP	GLE
GL1:
	CJNE	A,#LF,GL2
GLE:
	CLR	A
	MOV	@R1,A
	JMP	CRLF
GL2:
	CJNE	A,#BS,GL3
	JMP	GLB
GL3:
	CJNE	A,#DEL,GL4
GLB:
	MOV	A,R2
	JZ	GL0
	DEC	R1
	DEC	R2
	MOV	A,#BS
	CALL	CONOUT
	MOV	A,#' '
	CALL	CONOUT
	MOV	A,#BS
	CALL	CONOUT
	JMP	GL0
GL4:
	CJNE	A,#' ',$+3
	JC	GL0
	CJNE	A,#80H,$+3
	JNC	GL0
	CJNE	R2,#BUFLEN-1,$+3
	JNC	GL0		; Too long
	MOV	@R1,A
	INC	R1
	INC	R2
	CALL	CONOUT
	JMP	GL0

SKIPSP:
	MOV	A,@R1
	CJNE	A,#' ',SSR
	INC	R1
	JMP	SKIPSP
SSR:
	RET

UPPER:
	CJNE	A,#'a',$+3
	JC	UPR
	CJNE	A,#'z'+1,$+3
	JNC	UPR
	ADD	A,#'A'-'a'
UPR:
	RET

RDHEX:
	CLR	A
	MOV	R2,A		; Count
	MOV	R4,A		; Value (H)
	MOV	R5,A		; Value (L)
RH0:
	MOV	A,@R1
	CALL	UPPER
	CJNE	A,#'0',$+3
	JC	RHE
	CJNE	A,#'9'+1,$+3
	JC	RH1
	CJNE	A,#'A',$+3
	JC	RHE
	CJNE	A,#'F'+1,$+3
	JNC	RHE
	CLR	C
	SUBB	A,#'A'-'9'-1
RH1:
	CLR	C
	SUBB	A,#'0'
	MOV	R0,A
	MOV	A,R4
	SWAP	A
	ANL	A,#0F0H
	MOV	R4,A
	MOV	A,R5
	SWAP	A
	MOV	R5,A
	ANL	A,#0FH
	ORL	A,R4
	MOV	R4,A
	MOV	A,R5
	ANL	A,#0F0H
	ORL	A,R0
	MOV	R5,A
	INC	R1
	INC	R2
	JMP	RH0
RHE:
	RET

READ:
	MOV	R0,BANK
	CJNE	R0,#'D',RD0
	;; DATA memory
	MOV	A,R5
	MOV	R0,A
	MOV	A,@R0
	RET
RD0:
	MOV	DPH,R4
	MOV	DPL,R5
	CJNE	R0,#'C',RD1
	;; CODE memory
	CLR	A
	MOVC	A,@A+DPTR
	RET
RD1:
	;; EXT memory
	MOVX	A,@DPTR
	RET

WRITE:
	MOV	R0,BANK
	CJNE	R0,#'D',WR0
	;; DATA memory
	PUSH	ACC
	MOV	A,R5
	MOV	R0,A
	POP	ACC
	MOV	@R0,A
	RET
WR0:
	MOV	DPH,R4
	MOV	DPL,R5
	CJNE	R0,#'C',WR1
	;; CODE memory
	RET			; Do nothing
WR1:
	;; EXT memory
	MOVX	@DPTR,A
	RET
	
INTDMY:
	RETI
	
OPNMSG:
	DB	CR,LF,"Universal Monitor 8051",CR,LF,00H

PROMPT:
	DB	"] ",00H

IHEMSG:
	DB	"Error ihex",CR,LF,00H
SHEMSG:
	DB	"Error srec",CR,LF,00H
ERRMSG:
	DB	"Error",CR,LF,00H

DSEP0:
	DB	" :",00H
DSEP1:
	DB	" : ",00H
IHEXER:
        DB	":00000001FF",CR,LF,00H
SRECER:
        DB	"S9030000FC",CR,LF,00H


	IF USE_DEV_8051
	INCLUDE	"dev/dev_8051.asm"
	ENDIF

	IF USE_DEV_EMILY
	INCLUDE	"dev/dev_emily.asm"
	ENDIF

;;;
;;; Internal RAM area
;;;

	SEGMENT	DATA

	ORG	WORK_B

INBUF:	DS	BUFLEN		; Line input buffer
DSADDR:	DS	2		; DUMP start address
DEADDR:	DS	2		; DUMP end address
DSTATE:	DS	1		; DUMP state
GADDR:	DS	2		; GO address
SADDR:	DS	2		; SET address
BANK:	DS	1		; Memory bank ('C'/'D'/'X')
HEXMOD:	DS	1		; HEX file mode
PSPEC:	DS	1		; Processor spec.

RECTYP:	DS	1		; Record type

TP0:	DS	2		; Temporary pointer
	
;;;
;;; External RAM area
;;;

	SEGMENT	XDATA

	END
