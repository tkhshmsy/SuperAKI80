;;;
;;; Universal Monitor for Signetics 2650
;;;   Copyright (C) 2021 Haruo Asano
;;;

	CPU	2650
	INTSYNTAX +h'hex'

	INCLUDE	"config.inc"

	INCLUDE	"../common.inc"


;;;
;;; ROM	area
;;;
	
	ORG	H'0000'

CSTART:	
	LODI,R0 H'67'		; F=1, II=1, PS=7
	LPSU
	LODI,R0 H'02'		; RS=0, WC=0. COM=1 (COM must be 1)
	LPSL

	BSTA,UN	INIT

	LODI,R0	high(RAM_B)
	STRA,R0	DSADDR
	STRA,R0	GADDR
	STRA,R0	SADDR
	LODI,R0	low(RAM_B)
	STRA,R0	DSADDR+1
	STRA,R0	GADDR+1
	STRA,R0	SADDR+1

	;; Opening message
	LODI,R0	high(OPNMSG)
	STRA,R0	PT0
	LODI,R0	low(OPNMSG)
	STRA,R0	PT0+1
	BSTA,UN	STROUT

WSTART:
	LODI,R0	high(PROMPT)
	STRA,R0	PT0
	LODI,R0	low(PROMPT)
	STRA,R0	PT0+1
	BSTA,UN	STROUT

	BSTA,UN	GETLIN
	LODI,R2	0
	BSTA,UN	SKIPSP
	BSTA,UN	UPPER
	IORZ	R0
	BCTR,EQ	WSTART

	COMI,R0	'D'
	BCTR,EQ	DUMP
	COMI,R0	'G'
	BCTA,EQ	GO
	COMI,R0	'S'
	BCTA,EQ	SETM

	COMI,R0	'L'
	BCTA,EQ	LOADH

	COMI,R0	'I'
	BCTA,EQ	PIN
	COMI,R0	'O'
	BCTA,EQ	POUT

ERR:
	LODI,R0	high(ERRMSG)
	STRA,R0	PT0
	LODI,R0	low(ERRMSG)
	STRA,R0	PT0+1
	BSTA,UN	STROUT
	BCTA,UN	WSTART

;;; Dump memory

DUMP:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	COMI,R3	0
	BCFR,EQ	DP0

	;; No arg.
	BSTA,UN	SKIPSP
	IORZ,R0
	BCFR,EQ	ERR
DP00:
	LODA,R0	DSADDR+1
	ADDI,R0	128
	STRA,R0	DEADDR+1
	PPSL	H'08'		; WC=1
	LODA,R0	DSADDR
	ADDI,R0	0
	STRA,R0	DEADDR
	CPSL	H'08'		; WC=0
	BCTA,UN	DPM

	;; 1st arg. found
DP0:
	LODA,R0	RHVAL
	STRA,R0	DSADDR
	LODA,R0	RHVAL+1
	STRA,R0	DSADDR+1
	BSTA,UN	SKIPSP
	COMI,R0	','
	BCTR,EQ	DP1
	IORZ	R0
	BCFA,EQ	ERR
	;; No 2nd arg.
	BCTR,UN	DP00
DP1:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	COMI,R3	0
	BCTA,EQ	ERR
	LODA,R0	INBUF,R2
	BCFA,EQ	ERR
	LODA,R0	RHVAL+1
	ADDI,R0	1
	STRA,R0	DEADDR+1
	PPSL	H'08'		; WC=1
	LODA,R0	RHVAL
	ADDI,R0	0
	STRA,R0	DEADDR
	CPSL	H'08'		; WC=0

	;; DUMP main
DPM:
	;; Begin DEBUG
	IF DEBUG
	LODA,R0	DSADDR
	BSTA,UN	HEXOUT2
	LODA,R0	DSADDR+1
	BSTA,UN	HEXOUT2
	LODI,R0	'-'
	BSTA,UN	CONOUT
	LODA,R0	DEADDR
	BSTA,UN	HEXOUT2
	LODA,R0	DEADDR+1
	BSTA,UN	HEXOUT2
	BSTA,UN	CRLF
	ENDIF
	;; End DEBUG

	LODA,R0	DSADDR+1
	ANDI,R0	H'F0'
	STRA,R0	PT1+1
	LODA,R0	DSADDR
	STRA,R0	PT1
	LODI,R3	0
DPM0:
	BSTR,UN	DPL
	LODA,R0	PT1+1
	ADDI,R0	16
	STRA,R0	PT1+1
	PPSL	H'08'		; WC=1
	LODA,R0	PT1
	ADDI,R0	0
	STRA,R0	PT1
	CPSL	H'08'		; WC=0
	BSTA,UN	CONST
	IORZ	R0
	BCFR,EQ	DPM1		; Abort
	COMI,R3	2
	BCTR,LT	DPM0
	LODA,R0	DEADDR+1
	STRA,R0	DSADDR+1
	LODA,R0	DEADDR
	STRA,R0	DSADDR
	BCTA,UN	WSTART
DPM1:
	LODA,R0	PT1+1
	STRA,R0	DSADDR+1
	LODA,R0	PT1
	STRA,R0	DSADDR
	BSTA,UN	CONIN
	BCTA,UN	WSTART

	;; Dump line
DPL:	
	LODA,R0	PT1
	BSTA,UN	HEXOUT2
	LODA,R0	PT1+1
	BSTA,UN	HEXOUT2
	LODI,R0	high(DSEP0)
	STRA,R0	PT0
	LODI,R0	low(DSEP0)
	STRA,R0	PT0+1
	BSTA,UN	STROUT
	LODI,R2	0
DPL0:
	BSTR,UN	DPB
	COMI,R2	16
	BCTR,LT	DPL0

	LODI,R0	high(DSEP1)
	STRA,R0	PT0
	LODI,R0	low(DSEP1)
	STRA,R0	PT0+1
	BSTA,UN	STROUT

	;; Print ASCII area
	LODI,R2	0
DPL1:
	LODA,R0	INBUF,R2
	COMI,R0	' '
	BCTR,LT	DPL2
	COMI,R0	H'7F'
	BCFR,LT	DPL2
	BCTR,UN	DPL3
DPL2:
	LODI,R0	'.'
DPL3:
	BSTA,UN	CONOUT
	ADDI,R2	1
	COMI,R2	16
	BCTR,LT	DPL1
	BCTA,UN	CRLF

	;; Dump byte
DPB:
	LODI,R0	' '
	BSTA,UN	CONOUT
	COMI,R3	0		; DSTATE
	BCFR,EQ	DPB2
	;; Dump state 0
	LODA,R0	PT1+1
	ADDZ	R2
	COMA,R0	DSADDR+1
	BCTR,EQ	DPB1
	;; Still 0 or 2
DPB0:
	LODI,R0	' '
	STRA,R0	INBUF,R2
	BSTA,UN	CONOUT
	LODI,R0	' '
	BSTA,UN	CONOUT
	ADDI,R2	1
	RETC,UN
	;; Found start address
DPB1:
	LODI,R3	1		; DSTATE
DPB2:
	COMI,R3	1
	BCFR,EQ	DPB0
	;; Dump state 1
	LODA,R0	*PT1,R2
	STRA,R0	INBUF,R2
	BSTA,UN	HEXOUT2
	ADDI,R2	1

	LODA,R0	PT1+1
	ADDZ	R2
	COMA,R0	DEADDR+1
	BCFR,EQ	DPBE
	PPSL	H'08'		; WC=1
	LODA,R0	PT1
	ADDI,R0	0
	CPSL	H'08'		; WC=0
	COMA,R0	DEADDR
	BCFR,EQ	DPBE
	;; Found end address
	LODI,R3	2		; DSTATE
DPBE:
	RETC,UN

;;; Go address

GO:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	LODA,R0	INBUF,R2
	BCFA,EQ	ERR
	COMI,R3	0
	BCTR,EQ	G0
	LODA,R0	RHVAL
	STRA,R0	GADDR
	LODA,R0	RHVAL+1
	STRA,R0	GADDR+1
G0:
	BCTA,UN	*GADDR

;;; Set memory

SETM:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	LODA,R0	INBUF,R2
	BCFA,EQ	ERR
SM0:
	COMI,R3	0
	BCTR,EQ	SM1
	LODA,R0	RHVAL
	STRA,R0	SADDR
	LODA,R0	RHVAL+1
	STRA,R0	SADDR+1
SM1:
	LODA,R0	SADDR
	BSTA,UN	HEXOUT2
	LODA,R0	SADDR+1
	BSTA,UN	HEXOUT2

	LODI,R0	high(DSEP1)
	STRA,R0	PT0
	LODI,R0	low(DSEP1)
	STRA,R0	PT0+1
	BSTA,UN	STROUT

	LODA,R0	*SADDR
	BSTA,UN	HEXOUT2
	LODI,R0	' '
	BSTA,UN	CONOUT
	BSTA,UN	GETLIN
	LODI,R2	0
	BSTA,UN	SKIPSP
	LODA,R0	INBUF,R2
	BCFR,EQ	SM2
SM10:
	;; Empty (Increment address)
	LODA,R0	SADDR+1
	ADDI,R0	1
	STRA,R0	SADDR+1
	PPSL	H'08'		; WC=1
	LODA,R0	SADDR
	ADDI,R0	0
	STRA,R0	SADDR
	CPSL	H'08'		; WC=0
	BCTA,UN	SM1
SM2:
	COMI,R0	'-'
	BCFR,EQ	SM3
	;; '-' (Decrement address)
	LODA,R0	SADDR+1
	SUBI,R0	1
	STRA,R0	SADDR+1
	PPSL	H'08'		; WC=1
	LODA,R0	SADDR
	SUBI,R0	0
	STRA,R0	SADDR
	CPSL	H'08'		; WC=0
	BCTA,UN	SM1
SM3:
	COMI,R0	'.'
	BCFR,EQ	SM4
	;; '.' (Quit)
	BCTA,UN	WSTART
SM4:
	BSTA,UN	RDHEX
	COMI,R3	0
	BCTA,EQ	ERR
	COMI,R0	0
	BCTA,GT	ERR
	LODA,R0	RHVAL+1
	STRA,R0	*SADDR
	BCTA,UN	SM10

;;; Load HEX file

LOADH:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	LODA,R0	INBUF,R2
	BCFA,EQ	ERR
LH0:
	BSTA,UN	CONIN
	BSTA,UN	UPPER
	COMI,R0	'S'
	BCTA,EQ	LHS0
	COMI,R0	':'
	BCTR,EQ	LHI0
LH2:
	;; Skip to EOL
	COMI,R0	CR
	BCTR,EQ	LH0
	COMI,R0	LF
	BCTR,EQ	LH0
LH3:
	BSTA,UN	CONIN
	BCTR,UN	LH2

LHI0:
	BSTA,UN	HEXIN
	STRZ	R3		; Checksum
	STRA,R0	CNT		; Length

	BSTA,UN	HEXIN
	STRA,R0	PT0		; Address H
	ADDZ	R3
	STRZ	R3		; Checksum
	
	BSTA,UN	HEXIN
	STRA,R0	PT0+1		; Address L
	ADDZ	R3
	STRZ	R3		; Checksum

	;; Add offset
	LODA,R0	PT0+1
	ADDA,R0	RHVAL+1
	STRA,R0	PT0+1
	PPSL	H'08'		; WC=1
	LODA,R0	PT0
	ADDA,R0	RHVAL
	STRA,R0	PT0
	CPSL	H'08'		; WC=0

	BSTA,UN	HEXIN
	COMI,R0	1
	BCTA,GT	LH2		; Skip unsupported record type
	STRA,R0	RECTYP
	ADDZ	R3
	STRZ	R3		; Checksum

	LODA,R0	CNT
	BCTR,EQ	LHI3
	LODI,R2	0
LHI1:
	BSTA,UN	HEXIN
	LODA,R1	RECTYP
	BCFR,EQ	LHI2

	STRA,R0	*PT0,R2
LHI2:
	ADDI,R2	1

	ADDZ	R3
	STRZ	R3		; Checksum

	COMA,R2	CNT
	BCTR,LT	LHI1
LHI3:
	BSTA,UN	HEXIN
	ADDZ	R3
	BCFA,EQ	LHIE		; Checksum error
	LODA,R0	RECTYP
	BCTA,EQ	LH3
	BCTA,UN	WSTART
LHIE:
	;; Begin: DEBUG
	IF DEBUG
	BSTA,UN	HEXOUT2
	ENDIF
	;; End: DEBUF
	LODI,R0	high(IHEMSG)
	STRA,R0	PT0
	LODI,R0	low(IHEMSG)
	STRA,R0	PT0+1
	BSTA,UN	STROUT
	BCTA,UN	WSTART

LHS0:
	BSTA,UN	CONIN
	LODI,R1	0
	COMI,R0	'1'
	BCTR,EQ	LHS00
	LODI,R1	1
	COMI,R0	'9'
	BCTR,EQ	LHS00
	BCTA,UN	LH2		; Skip unsupported record type
LHS00:
	STRA,R1	RECTYP

	BSTA,UN	HEXIN
	STRA,R0	CNT		; (CNT) = Length+3
	STRZ	R3		; Checksum

	BSTA,UN	HEXIN
	STRA,R0	PT0		; Address H
	ADDZ	R3
	STRZ	R3		; Checksum

	BSTA,UN	HEXIN
	STRA,R0	PT0+1		; Address L
	ADDZ	R3
	STRZ	R3		; Checksum
	
	;; Add offset
	LODA,R0	PT0+1
	ADDA,R0	RHVAL+1
	STRA,R0	PT0+1
	PPSL	H'08'		; WC=1
	LODA,R0	PT0
	ADDA,R0	RHVAL
	STRA,R0	PT0
	CPSL	H'08'		; WC=0

	LODA,R0	CNT
	SUBI,R0	3
	STRA,R0	CNT
	BCTR,EQ	LHS3
	LODI,R2	0
LHS1:
	BSTA,UN	HEXIN
	LODA,R1	RECTYP
	BCFR,EQ	LHS2

	STRA,R0	*PT0,R2
LHS2:
	ADDI,R2	1

	ADDZ	R3
	STRZ	R3		; Checksum
	
	COMA,R2	CNT
	BCTR,LT	LHS1
LHS3:
	BSTA,UN	HEXIN
	ADDZ	R3
	COMI,R0	H'FF'
	BCFR,EQ	LHSE		; Checksum error

	LODA,R0	RECTYP
	BCTA,EQ	LH3
	BCTA,UN	WSTART
LHSE:
	;; Begin: DEBUG
	IF DEBUG
	BSTA,UN	HEXOUT2
	ENDIF
	;; End: DEBUF
	LODI,R0	high(SHEMSG)
	STRA,R0	PT0
	LODI,R0	low(SHEMSG)
	STRA,R0	PT0+1
	BSTA,UN	STROUT
	BCTA,UN	WSTART

;;; Port in

PIN:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	IORZ	R0
	BCFA,EQ	ERR
	IORZ	R3
	BCTA,EQ	ERR		; Port address missing

	LODI,R0	H'54'		; REDE,R0 OPcode
	STRA,R0	INBUF
	LODA,R0	RHVAL+1
	STRA,R0	INBUF+1
	LODI,R0	H'17'		; RETC,UN OPcode
	STRA,R0	INBUF+2
	BSTA,UN	INBUF
	BSTA,UN	HEXOUT2
	BSTA,UN	CRLF
	BCTA,UN	WSTART

;;; Port out

POUT:
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	COMI,R0	','
	BCFA,EQ	ERR
	COMI,R3	0
	BCTA,EQ	ERR		; Port address missing
	LODA,R0	RHVAL+1
	STRA,R0	CNT		; Save port address
	ADDI,R2	1
	BSTA,UN	SKIPSP
	BSTA,UN	RDHEX
	BSTA,UN	SKIPSP
	IORZ	R0
	BCFA,EQ	ERR
	IORZ	R3
	BCTA,EQ	ERR		; Data missing

	LODI,R0 H'D4'		; WRTE,R0 OPcode
	STRA,R0	INBUF
	LODA,R0	CNT
	STRA,R0	INBUF+1
	LODI,R0	H'17'		; RETC,UN OPcode
	STRA,R0	INBUF+2
	LODA,R0	RHVAL+1
	BSTA,UN	INBUF
	BCTA,UN	WSTART

;;; Other support routines

STROUT:
	LODI,R2	-1		; Because '*PT0,R2,+' pre-increments R2
STRO0:
	LODA,R0	*PT0,R2,+
	RETC,EQ
	BSTA,UN	CONOUT
	BCTR,UN	STRO0

HEXOUT2:
	RRL,R0
	RRL,R0
	RRL,R0
	RRL,R0
	BSTR,UN	HEXOUT1
	RRR,R0
	RRR,R0
	RRR,R0
	RRR,R0
HEXOUT1:
	PPSL	H'10'		; RS=1
	STRZ	R3

	ANDI,R0	H'0F'
	ADDI,R0	'0'
	COMI,R0	'9'
	BCFR,GT	HO0
	ADDI,R0	'A'-'9'-1
HO0:
	BSTA,UN	CONOUT

	LODZ	R3
	CPSL	H'10'		; RS=0
	RETC,UN

HEXIN:
	EORZ	R0
	BSTR,UN	HI0
	RRL,R0
	RRL,R0
	RRL,R0
	RRL,R0
HI0:
	PPSL	H'10'		; RS=1
	STRZ	R3
	BSTA,UN	CONIN
	BSTA,UN	UPPER
	COMI,R0	'0'
	BCTR,LT	HIR
	COMI,R0	'9'
	BCFR,GT	HI1
	COMI,R0	'A'
	BCTR,LT	HIR
	COMI,R0	'F'
	BCTR,GT	HIR
	SUBI,R0	'A'-'9'-1
HI1:
	SUBI,R0	'0'
	ADDZ	R3
HIR:
	CPSL	H'10'		; RS=0
	RETC,UN

CRLF:
	LODI,R0	CR
	BSTA,UN	CONOUT
	LODI,R0	LF
	BCTA,UN	CONOUT
	
GETLIN:
	LODI,R2	0
GL0:
	BSTA,UN	CONIN
	COMI,R0	CR
	BCTR,EQ	GLE
	COMI,R0	LF
	BCTR,EQ	GLE
	COMI,R0	BS
	BCTR,EQ	GLB
	COMI,R0	DEL
	BCTR,EQ	GLB
	COMI,R0	' '
	BCTR,LT	GL0
	COMI,R0	H'80'
	BCFR,LT	GL0
	COMI,R2	BUFLEN-1
	BCFR,LT	GL0		; Too long
	STRA,R0	INBUF,R2
	ADDI,R2	1
	BSTA,UN	CONOUT
	BCTR,UN	GL0
GLB:
	COMI,R2	0
	BCTR,EQ	GL0
	SUBI,R2	1
	LODI,R0	BS
	BSTA,UN	CONOUT
	LODI,R0	' '
	BSTA,UN	CONOUT
	LODI,R0	BS
	BSTA,UN	CONOUT
	BCTR,UN	GL0
GLE:
	BSTA,UN	CRLF
	LODI,R0	0
	STRA,R0	INBUF,R2
	RETC,UN

SKIPSP:
	LODA,R0	INBUF,R2
	COMI,R0	' '
	BCFR,EQ	SSE
	ADDI,R2	1
	BCTR,UN	SKIPSP
SSE:
	RETC,UN

UPPER:
	COMI,R0	'a'
	RETC,LT
	COMI,R0	'z'
	RETC,GT
	SUBI,R0	'a'-'A'
	RETC,UN

RDHEX:
	EORZ	R0
	STRA,R0	RHVAL
	STRA,R0	RHVAL+1
	STRZ	R3		; Count
RH0:
	LODA,R0	INBUF,R2
	BSTR,UN	UPPER
	COMI,R0	'0'
	RETC,LT
	COMI,R0	'9'+1
	BCTR,LT	RH1
	COMI,R0	'A'
	RETC,LT
	COMI,R0	'F'
	RETC,GT
	SUBI,R0	'A'-'9'-1
RH1:
	SUBI,R0	'0'

	PPSL	H'18'		; RS=1, WC=1
	LODA,R1	RHVAL+1
	LODA,R2	RHVAL
	RRL,R1
	RRL,R2
	RRL,R1
	RRL,R2
	RRL,R1
	RRL,R2
	RRL,R1
	RRL,R2
	STRA,R2	RHVAL
	ANDI,R1	H'F0'
	IORZ	R1
	STRA,R0	RHVAL+1
	CPSL	H'18'		; RS=0, WC=0

	ADDI,R3	1
	ADDI,R2	1
	BCTR,UN	RH0

OPNMSG:
	DB	CR,LF,"Universal Monitor 2650",CR,LF,0
PROMPT:
	DB	"] ",0
IHEMSG:
	DB	"Error ihex",CR,LF,0
SHEMSG:
	DB	"Error srec",CR,LF,0
ERRMSG:
	DB	"Error",CR,LF,0

DSEP0:
	DB	" :",0
DSEP1:
	DB	" : ",0

;;; Console Driver

	IF USE_DEV_2651
	INCLUDE	"dev/dev_2651.asm"
	ENDIF

	IF USE_DEV_EMILY
	INCLUDE	"dev/dev_emily.asm"
	ENDIF

;;;
;;; RAM area
;;;

	ORG	WORK_B

INBUF:	DS	BUFLEN		; Line input buffer
DSADDR:	DS	2		; Dump start address
DEADDR:	DS	2		; Dump end address
GADDR:	DS	2		; Go address
SADDR:	DS	2		; Set address
RECTYP:	DS	1		; Record type

RHVAL:	DS	2		; 
PT0:	DS	2		; Generic Pointer 0
PT1:	DS	2		; Generic Pointer 1
CNT:	DS	1		; Generic Counter

	END
